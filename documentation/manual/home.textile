h1. springtester

The @springtester@ module is used in conjunction with the @spring@ module and provides additional classes for injecting mocks/stubs when writing tests for your Play! application.

h2. Getting started

Include @springtester@ in your Play! application by adding the following in your @dependencies.yml@:

bc. - play -> springtester [version]

h2. Usage

The @springtester@ module assumes you are wiring your application using the @spring@ module.  Here is an example of two classes being wired up using the @spring@ module.  The first is a @Person@ class that injects an @AgeCalculator@ and calls the @getAge(...)@ method:

bc. @Component
public class Person {
    @Resource private AgeCalculator calculator;
    public boolean canVote() {
        int age = calculator.calculate("1-January-1980");
        return age >= 18;
    }
}

The @AgeCalculator@ will then take the @Person'@s birth date and calculate their age:

bc. @Component
public class AgeCalculator {
    public int calculate(String birthDate) {
        // some code that figures out the age of the person
    }
}

Now let's say you want to write a test for @Person@ called @PersonTest@ and wish to replace the @AgeCalculator@ with a mock that returns the age of 20 instead of calculating the age:

bc. public final class PersonTest extends SpringMockitoUnitTestCase {
    @Subject private Person subject;
    @Mock(name = "calculator") AgeCalculator mockAgeCalculator;
    @Test
    public void testGetAge() throws Exception {
        Mockito.when(mockAgeCalculator.calculate("1-January-1980")).thenReturn(20);
        int actual = subject.getAge();
        assertEquals(20, actual);
    }
}


