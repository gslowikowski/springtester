h1. springtester

The @springtester@ module is used in conjunction with the @spring@ module and provides additional classes for injecting mocks/stubs when writing tests for your Play! application.

h2. Getting started

Include @springtester@ in your Play! application by adding the following in your @dependencies.yml@:

bc. - play -> springtester [version]

h2. Usage

The @springtester@ module assumes you are wiring your application using the @spring@ module.  Here is an example of two classes being wired up using the @spring@ module.  The first is a @Person@ class that injects an @AgeCalculator@ and calls the @calculate(...)@ method:

bc. @Component
public class Person {
    @Resource private AgeCalculator calculator;
    public boolean canVote() {
        int age = calculator.calculate("1-January-1980");
        return age >= 18;
    }
}

The @AgeCalculator@ will then take birth date of the @Person@ and calculate their age:

bc. @Component
public class AgeCalculator {
    public int calculate(String birthDate) {
        // some code that figures out the age of the person
    }
}

Now let's say you want to write a test for @Person@ called @PersonTest@ and wish to replace the @AgeCalculator@ with a mock that returns the age of 20 instead of calculating the actual age of the @Person@:

bc. public final class PersonTest extends SpringMockitoUnitTestCase {
    @Subject private Person subject;
    @Mock(name = "calculator") AgeCalculator mockAgeCalculator;
    @Test
    public void testGetAge() throws Exception {
        Mockito.when(mockAgeCalculator.calculate("1-January-1980")).thenReturn(20);
        int actual = subject.getAge();
        assertEquals(20, actual);
    }
}

Things to note:

* The annotation @Subject@ will automatically inject the subject into the test.  In the example above, a @Person@ object will be injected into the test.  Be sure that the subject is a Spring component by annotating it with @Component.
* The annotation @Mock@ is used to create a mock of the given class.  In the example above, an @AgeCalculator@ object will be mocked.  The @Mock annotation can take the @name@ property which specifies the name of the field the mock will replace in the subject.  If you name the mock field the same as the field in the subject, you may omit the name property like so:

bc. @Mock AgeCalculator ageCalculator;

* The remainder of the example test above uses *Mockito* to mock the call to the @calculate@ method and return 20 and then asserts that the @subject.getAge()@ call will return 20.
